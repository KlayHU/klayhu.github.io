<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go语言学习笔记</title>
    <link href="undefined2019/11/21/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>2019/11/21/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="go语言学习笔记">Go语言学习笔记</h2><h3 id="day01-：">##Day01  ：</h3><h4 id="函数：">函数：</h4><h5 id="函数的定义">函数的定义:</h5><p>**·**func xxx(函数名)（携带的参数）函数的返回值{</p><p>/*      函数体      */</p><p>}</p><p>eg:</p><p><code>func minus(a,b int , op string ) int{}</code></p><p><code>func div(c,d int)(int,int){}</code></p><p><code>func multiply(e,f int)(g,h int){}</code></p><p><strong>·</strong>▶️作为函数式编程的语言，在Go语言中一个函数可以有多个返回值，在声明返回值的<code>return</code>语句中多个返回值中间用<code>,</code>隔开。</p><p><strong>·</strong>▶️如果在定义函数返回值时不想使用某个参数，在参数位上输入<code>_</code>下划线即可</p><p><strong>·</strong>🏴函数式编程规范：</p><p><code>func apply(func op(int , int) int , a , b int )int{</code></p><p><strong>·</strong>⏫解析：在apply函数中传入的参数是op这个函数和a,b两个int类型的变量，op函数返回值是int，自带两个int类型参数。</p><p><strong>·</strong>🛰定义一个参数列表：</p><p><code>func sum(numbers ...int)int{</code></p><p>​<code>for i:=range numbers{</code></p><p>​<code>s += numbers[i]</code></p><p>​<code>}</code></p><p>​<code>return s</code></p><p><code>}</code></p><hr><h4 id="指针：">指针：</h4><p>⚡️Go语言指针没有运算，只存在值传递</p><h5 id="指针的定义：">指针的定义：</h5><p><code>var a int =3</code></p><p><code>var pa *int = &amp;a</code></p><p><code>*pa = 3</code></p><p><code>fmt.Println(*pa,pa)</code></p><p>▶️打印结果是:3  0xc000000a088</p><p>但是多次运行发现打印的地址都不一样，这与初始化内存空间有关。</p><p>指针值传递代码</p><p><code>func swap(a,s *int)(int,int){</code></p><p>​<code>*s,*a = *a,*s</code></p><p><code>}</code></p><p><code>func main(){</code></p><p>​<code>a:=3,s:=5</code></p><p>​<code>swap(&amp;a,&amp;s)</code></p><p>​<code>fmt.Println(a,s)</code></p><p><code>}</code></p><p><strong>·</strong>☑️打印结果是：5 , 3</p><hr><h4 id="数组">数组</h4><p>func f(arr[5]int){</p><p>//函数体</p><p>}</p><p><strong>·</strong>🥊数组是值类型，调用该函数相当于拷贝。可以用指针数组传值。</p><h5 id="数组的定义：">数组的定义：</h5><p><code>var array1 [5] int</code></p><p><code>array2:= [3]int {1,2,3}</code></p><p><code>array3:=[...]int{1,2,3,4,5}</code></p><p><code>var grid [4][5] bool</code></p><p>数组遍历：</p><p><code>for i:=0;i&lt;len(arr2);i+{</code></p><p><code>fmt.Println(arr2[i])</code></p><p><code>}</code></p><p><code>for i,r:= range arr1{//i：下标；r：数值；</code></p><p>​<code>fmt.Println(i,r)</code></p><p><code>}</code></p><hr><h3 id="day02-：">##Day02  ：</h3><h4 id="切片：">切片：</h4>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github的第一篇博客</title>
    <link href="undefined2019/11/21/Github%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>2019/11/21/Github%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>写博客总是能让我静心，来Github上我就选择不记录技术以外的生活，相较于博客园我会记录一些debug过程，Github对我来说作为托管代码、学习源码和记录学习过程的平台更要学会利用、经营。坚持写博客另一方面也是为今后写文档培养意识和兴趣。</p><p>附上一张昨晚拍的夕阳！🥂</p><p><img src="/2019/11/21/Github%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image1.jpg" srcset="undefined" alt></p><p>Stay hungry. Stay foolish.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>