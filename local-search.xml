<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go语言学习笔记</title>
    <link href="undefined2019/11/21/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>2019/11/21/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习笔记"><a href="#Go语言学习笔记" class="headerlink" title="Go语言学习笔记"></a>Go语言学习笔记</h2><h3 id="Day01-："><a href="#Day01-：" class="headerlink" title="##Day01  ："></a>##Day01  ：</h3><h4 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h4><h5 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义:"></a>函数的定义:</h5><p><strong>·</strong>func xxx(函数名)（携带的参数）函数的返回值{    </p><p>/*      函数体      */</p><p>}</p><p>eg:</p><p><code>func minus(a,b int , op string ) int{}</code></p><p><code>func div(c,d int)(int,int){}</code></p><p><code>func multiply(e,f int)(g,h int){}</code></p><p><strong>·</strong>:arrow_forward:作为函数式编程的语言，在Go语言中一个函数可以有多个返回值，在声明返回值的<code>return</code>语句中多个返回值中间用<code>,</code>隔开。</p><p><strong>·</strong>:arrow_forward:如果在定义函数返回值时不想使用某个参数，在参数位上输入<code>_</code>下划线即可</p><p><strong>·</strong>:black_flag:函数式编程规范：</p><p><code>func apply(func op(int , int) int , a , b int )int{</code></p><p><strong>·</strong>:arrow_double_up:解析：在apply函数中传入的参数是op这个函数和a,b两个int类型的变量，op函数返回值是int，自带两个int类型参数。</p><p><strong>·</strong>:artificial_satellite:定义一个参数列表：</p><p><code>func sum(numbers ...int)int{</code></p><p>​    <code>for i:=range numbers{</code></p><p>​        <code>s += numbers[i]</code></p><p>​    <code>}</code></p><p>​    <code>return s</code></p><p><code>}</code></p><hr><h4 id="指针："><a href="#指针：" class="headerlink" title="指针："></a>指针：</h4><p>:zap:Go语言指针没有运算，只存在值传递</p><h5 id="指针的定义："><a href="#指针的定义：" class="headerlink" title="指针的定义："></a>指针的定义：</h5><p><code>var a int =3</code></p><p><code>var pa *int = &amp;a</code></p><p><code>*pa = 3</code></p><p><code>fmt.Println(*pa,pa)</code></p><p>:arrow_forward:打印结果是:3  0xc000000a088</p><p>但是多次运行发现打印的地址都不一样，这与初始化内存空间有关。</p><p>指针值传递代码</p><p><code>func swap(a,s *int)(int,int){</code></p><p>​    <code>*s,*a = *a,*s</code></p><p><code>}</code></p><p><code>func main(){</code></p><p>​    <code>a:=3,s:=5</code></p><p>​    <code>swap(&amp;a,&amp;s)</code></p><p>​    <code>fmt.Println(a,s)</code></p><p><code>}</code></p><p><strong>·</strong>:ballot_box_with_check:打印结果是：5 , 3</p><hr><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>func f(arr[5]int){</p><p>//函数体</p><p>}</p><p><strong>·</strong>:boxing_glove:数组是值类型，调用该函数相当于拷贝。可以用指针数组传值。</p><h5 id="数组的定义："><a href="#数组的定义：" class="headerlink" title="数组的定义："></a>数组的定义：</h5><p><code>var array1 [5] int</code></p><p><code>array2:= [3]int {1,2,3}</code></p><p><code>array3:=[...]int{1,2,3,4,5}</code></p><p><code>var grid [4][5] bool</code></p><p>数组遍历：</p><p><code>for i:=0;i&lt;len(arr2);i+{</code></p><p><code>fmt.Println(arr2[i])</code></p><p><code>}</code></p><p><code>for i,r:= range arr1{        //i：下标；r：数值；</code></p><p>​    <code>fmt.Println(i,r)</code></p><p><code>}</code></p><hr><h3 id="Day02-："><a href="#Day02-：" class="headerlink" title="##Day02  ："></a>##Day02  ：</h3><h4 id="切片："><a href="#切片：" class="headerlink" title="切片："></a>切片：</h4><p> :smile: </p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我在github的第一篇博客</title>
    <link href="undefined2019/11/18/%E6%88%91%E5%9C%A8github%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>2019/11/18/%E6%88%91%E5%9C%A8github%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>